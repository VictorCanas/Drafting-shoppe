'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AjaxClient = require('./ajaxClient');
var ApiClient = require('./apiClient');
var WebStoreClient = require('./webstoreClient');

var ProductCategories = require('./api/productCategories');
var Products = require('./api/products/products');
var ProductOptions = require('./api/products/options');
var ProductOptionValues = require('./api/products/optionValues');
var ProductVariants = require('./api/products/variants');
var ProductImages = require('./api/products/images');
var Sitemap = require('./api/sitemap');
var Theme = require('./api/theme/theme');
var ThemeSettings = require('./api/theme/settings');
var ThemeAssets = require('./api/theme/assets');
var ThemePlaceholders = require('./api/theme/placeholders');
var CustomerGroups = require('./api/customerGroups');
var Customers = require('./api/customers');
var AjaxCart = require('./api/ajaxCart');
var Orders = require('./api/orders/orders');
var OrderDiscounts = require('./api/orders/discounts');
var OrderTransactions = require('./api/orders/transactions');
var OrderItems = require('./api/orders/items');
var OrderStatuses = require('./api/orders/statuses');
var ShippingMethods = require('./api/shippingMethods');
var PaymentMethods = require('./api/paymentMethods');
var PaymentGateways = require('./api/paymentGateways');
var AjaxShippingMethods = require('./api/ajaxShippingMethods');
var AjaxPaymentMethods = require('./api/ajaxPaymentMethods');
var AjaxPaymentFormSettings = require('./api/ajaxPaymentFormSettings');
var Countries = require('./api/countries');
var Currencies = require('./api/currencies');
var Text = require('./api/text');
var Settings = require('./api/settings');
var CheckoutFields = require('./api/checkoutFields');
var Pages = require('./api/pages');
var Tokens = require('./api/tokens');
var Redirects = require('./api/redirects');
var Webhooks = require('./api/webhooks');
var Files = require('./api/files');
var AppSettings = require('./api/apps/settings');
var WebStoreAccount = require('./webstore/account');
var WebStoreServices = require('./webstore/services');
var WebStoreServiceSettings = require('./webstore/serviceSettings');
var WebStoreServiceActions = require('./webstore/serviceActions');
var WebStoreServiceLogs = require('./webstore/serviceLogs');

var Client = function Client(options) {
  _classCallCheck(this, Client);

  if (!options) {
    options = {};
  }

  this.apiBaseUrl = options.apiBaseUrl || '/api/v1';
  this.apiToken = options.apiToken;
  this.ajaxBaseUrl = options.ajaxBaseUrl || '/ajax';
  this.webstoreToken = options.webstoreToken;

  var apiClient = new ApiClient({ baseUrl: this.apiBaseUrl, token: this.apiToken });
  var ajaxClient = new AjaxClient({ baseUrl: this.ajaxBaseUrl });
  var webstoreClient = new WebStoreClient({ token: this.webstoreToken });

  this.products = new Products(apiClient);
  this.products.options = new ProductOptions(apiClient);
  this.products.options.values = new ProductOptionValues(apiClient);
  this.products.variants = new ProductVariants(apiClient);
  this.products.images = new ProductImages(apiClient);
  this.productCategories = new ProductCategories(apiClient);
  this.customers = new Customers(apiClient);
  this.orders = new Orders(apiClient);
  this.orders.discounts = new OrderDiscounts(apiClient);
  this.orders.transactions = new OrderTransactions(apiClient);
  this.orders.items = new OrderItems(apiClient);
  this.orderStatuses = new OrderStatuses(apiClient);
  this.shippingMethods = new ShippingMethods(apiClient);
  this.paymentMethods = new PaymentMethods(apiClient);
  this.paymentGateways = new PaymentGateways(apiClient);
  this.customerGroups = new CustomerGroups(apiClient);
  this.sitemap = new Sitemap(apiClient);
  this.theme = new Theme(apiClient);
  this.theme.settings = new ThemeSettings(apiClient);
  this.theme.assets = new ThemeAssets(apiClient);
  this.theme.placeholders = new ThemePlaceholders(apiClient);
  this.countries = new Countries(apiClient);
  this.currencies = new Currencies(apiClient);
  this.text = new Text(apiClient);
  this.settings = new Settings(apiClient);
  this.checkoutFields = new CheckoutFields(apiClient);
  this.pages = new Pages(apiClient);
  this.tokens = new Tokens(apiClient);
  this.redirects = new Redirects(apiClient);
  this.webhooks = new Webhooks(apiClient);
  this.files = new Files(apiClient);
  this.apps = {};
  this.apps.settings = new AppSettings(apiClient);

  this.ajax = {};
  this.ajax.products = new Products(ajaxClient);
  this.ajax.sitemap = new Sitemap(ajaxClient);
  this.ajax.cart = new AjaxCart(ajaxClient);
  this.ajax.countries = new Countries(ajaxClient);
  this.ajax.currencies = new Currencies(ajaxClient);
  this.ajax.shippingMethods = new AjaxShippingMethods(ajaxClient);
  this.ajax.paymentMethods = new AjaxPaymentMethods(ajaxClient);
  this.ajax.paymentFormSettings = new AjaxPaymentFormSettings(ajaxClient);
  this.ajax.pages = new Pages(ajaxClient);

  this.webstore = {};
  this.webstore.account = new WebStoreAccount(webstoreClient);
  this.webstore.services = new WebStoreServices(webstoreClient);
  this.webstore.services.settings = new WebStoreServiceSettings(webstoreClient);
  this.webstore.services.actions = new WebStoreServiceActions(webstoreClient);
  this.webstore.services.logs = new WebStoreServiceLogs(webstoreClient);
};

Client.authorize = function (baseUrl, email) {
  return ApiClient.authorize(baseUrl, '/authorize', email);
};

Client.authorizeInWebStore = function (email, admin_url) {
  return WebStoreClient.authorize(email, admin_url);
};

module.exports = Client;
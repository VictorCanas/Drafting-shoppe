'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var WebStoreClient = function () {
  function WebStoreClient(options) {
    _classCallCheck(this, WebStoreClient);

    this.baseUrl = 'https://api.cezerin.com/v1';
    this.token = options.token;
  }

  _createClass(WebStoreClient, [{
    key: 'getConfig',
    value: function getConfig(method, data) {
      var config = {
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept-Encoding': 'gzip, deflate',
          'Authorization': 'Bearer ' + this.token
        }
      };

      if (data) {
        config.body = JSON.stringify(data);
      }
      return config;
    }
  }, {
    key: 'postFormDataConfig',
    value: function postFormDataConfig(formData) {
      var config = {
        method: 'post',
        body: formData,
        headers: {
          'Authorization': 'Bearer ' + this.token
        }
      };

      return config;
    }
  }, {
    key: 'get',
    value: function get(endpoint, filter) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint + "?" + _queryString2.default.stringify(filter), this.getConfig('get')).then(WebStoreClient.returnStatusAndJson);
    }
  }, {
    key: 'post',
    value: function post(endpoint, data) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.getConfig('post', data)).then(WebStoreClient.returnStatusAndJson);
    }
  }, {
    key: 'put',
    value: function put(endpoint, data) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.getConfig('put', data)).then(WebStoreClient.returnStatusAndJson);
    }
  }, {
    key: 'delete',
    value: function _delete(endpoint) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.getConfig('delete')).then(WebStoreClient.returnStatusAndJson);
    }
  }, {
    key: 'postFormData',
    value: function postFormData(endpoint, formData) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.postFormDataConfig(formData)).then(WebStoreClient.returnStatusAndJson);
    }
  }]);

  return WebStoreClient;
}();

WebStoreClient.authorize = function (email, admin_url) {
  var config = {
    method: 'post',
    headers: {
      'Content-Type': 'application/json',
      'Accept-Encoding': 'gzip, deflate'
    },
    body: JSON.stringify({ email: email, admin_url: admin_url })
  };

  return (0, _isomorphicFetch2.default)('https://api.cezerin.com/v1/account/authorize', config).then(WebStoreClient.returnStatusAndJson);
};

WebStoreClient.returnStatusAndJson = function (response) {
  // response.status (number) - HTTP response code in the 100â€“599 range
  // response.statusText (String) - Status text as reported by the server, e.g. "Unauthorized"
  // response.ok (boolean) - True if status is HTTP 2xx
  // response.headers (Headers)
  // response.url (String)

  return response.json().then(function (json) {
    return { status: response.status, json: json };
  }).catch(function () {
    return { status: response.status, json: null };
  });
};

module.exports = WebStoreClient;
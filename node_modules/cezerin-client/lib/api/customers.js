'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Customers = function () {
  function Customers(client) {
    _classCallCheck(this, Customers);

    this.client = client;
  }

  _createClass(Customers, [{
    key: 'list',
    value: function list(filter) {
      return this.client.get('/customers', filter);
    }
  }, {
    key: 'retrieve',
    value: function retrieve(id, filter) {
      return this.client.get('/customers/' + id, filter);
    }
  }, {
    key: 'create',
    value: function create(data) {
      return this.client.post('/customers', data);
    }
  }, {
    key: 'update',
    value: function update(id, data) {
      return this.client.put('/customers/' + id, data);
    }
  }, {
    key: 'delete',
    value: function _delete(id) {
      return this.client.delete('/customers/' + id);
    }
  }, {
    key: 'createAddress',
    value: function createAddress(customer_id, data) {
      return this.client.post('/customers/' + customer_id, data);
    }
  }, {
    key: 'updateAddress',
    value: function updateAddress(customer_id, address_id, data) {
      return this.client.put('/customers/' + customer_id + '/addresses/' + address_id, data);
    }
  }, {
    key: 'deleteAddress',
    value: function deleteAddress(customer_id, address_id) {
      return this.client.delete('/customers/' + customer_id + '/addresses/' + address_id);
    }
  }, {
    key: 'setDefaultBillingAddress',
    value: function setDefaultBillingAddress(customer_id, address_id) {
      return this.client.post('/customers/' + customer_id + '/addresses/' + address_id + '/default_billing');
    }
  }, {
    key: 'setDefaultShippingAddress',
    value: function setDefaultShippingAddress(customer_id, address_id) {
      return this.client.post('/customers/' + customer_id + '/addresses/' + address_id + '/default_shipping');
    }
  }]);

  return Customers;
}();

module.exports = Customers;
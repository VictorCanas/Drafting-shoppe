'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Orders = function () {
  function Orders(client) {
    _classCallCheck(this, Orders);

    this.client = client;
  }

  _createClass(Orders, [{
    key: 'list',
    value: function list(filter) {
      return this.client.get('/orders', filter);
    }
  }, {
    key: 'retrieve',
    value: function retrieve(order_id, filter) {
      return this.client.get('/orders/' + order_id, filter);
    }
  }, {
    key: 'create',
    value: function create(data) {
      return this.client.post('/orders', data);
    }
  }, {
    key: 'update',
    value: function update(order_id, data) {
      return this.client.put('/orders/' + order_id, data);
    }
  }, {
    key: 'delete',
    value: function _delete(order_id) {
      return this.client.delete('/orders/' + order_id);
    }
  }, {
    key: 'recalculate',
    value: function recalculate(order_id) {
      return this.client.put('/orders/' + order_id + '/recalculate');
    }
  }, {
    key: 'checkout',
    value: function checkout(order_id) {
      return this.client.put('/orders/' + order_id + '/checkout');
    }
  }, {
    key: 'cancel',
    value: function cancel(order_id) {
      return this.client.put('/orders/' + order_id + '/cancel');
    }
  }, {
    key: 'close',
    value: function close(order_id) {
      return this.client.put('/orders/' + order_id + '/close');
    }
  }, {
    key: 'updateBillingAddress',
    value: function updateBillingAddress(order_id, address) {
      return this.client.put('/orders/' + order_id + '/billing_address', address);
    }
  }, {
    key: 'updateShippingAddress',
    value: function updateShippingAddress(order_id, address) {
      return this.client.put('/orders/' + order_id + '/shipping_address', address);
    }
  }, {
    key: 'getPaymentFormSettings',
    value: function getPaymentFormSettings(order_id) {
      return this.client.get('/orders/' + order_id + '/payment_form_settings');
    }
  }]);

  return Orders;
}();

module.exports = Orders;
'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _queryString = require('query-string');

var _queryString2 = _interopRequireDefault(_queryString);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var AjaxClient = function () {
  function AjaxClient(options) {
    _classCallCheck(this, AjaxClient);

    this.baseUrl = options.baseUrl;
  }

  _createClass(AjaxClient, [{
    key: 'getConfig',
    value: function getConfig(method, data, cookie) {
      var config = {
        credentials: this.getCredentialsConfig(this.baseUrl),
        method: method,
        headers: {
          'Content-Type': 'application/json',
          'Accept-Encoding': 'gzip, deflate'
        }
      };

      if (cookie) {
        config.headers.Cookie = cookie;
      }

      if (data) {
        config.body = JSON.stringify(data);
      }
      return config;
    }
  }, {
    key: 'getCredentialsConfig',
    value: function getCredentialsConfig(baseUrl) {
      var includePrefix = baseUrl.includes('http://') || baseUrl.includes('https://');
      return includePrefix ? 'include' : 'same-origin';
    }
  }, {
    key: 'returnStatusAndJson',
    value: function returnStatusAndJson(response) {
      // response.status (number) - HTTP response code in the 100â€“599 range
      // response.statusText (String) - Status text as reported by the server, e.g. "Unauthorized"
      // response.ok (boolean) - True if status is HTTP 2xx
      // response.headers (Headers)
      // response.url (String)

      return response.json().then(function (json) {
        return { status: response.status, json: json };
      }).catch(function () {
        return { status: response.status, json: null };
      });
    }
  }, {
    key: 'get',
    value: function get(endpoint, filter, cookie) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint + "?" + _queryString2.default.stringify(filter), this.getConfig('get', null, cookie)).then(this.returnStatusAndJson);
    }
  }, {
    key: 'post',
    value: function post(endpoint, data) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.getConfig('post', data)).then(this.returnStatusAndJson);
    }
  }, {
    key: 'put',
    value: function put(endpoint, data) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.getConfig('put', data)).then(this.returnStatusAndJson);
    }
  }, {
    key: 'delete',
    value: function _delete(endpoint) {
      return (0, _isomorphicFetch2.default)(this.baseUrl + endpoint, this.getConfig('delete')).then(this.returnStatusAndJson);
    }
  }]);

  return AjaxClient;
}();

module.exports = AjaxClient;